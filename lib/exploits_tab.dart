import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:url_launcher/url_launcher.dart';
import 'exploit_model.dart';

class ExploitsTab extends StatelessWidget {
  const ExploitsTab({super.key});

  Stream<List<ExploitCard>> _getExploitsStream() {
    return FirebaseFirestore.instance
        .collection('cards')
        .snapshots()
        .map((snapshot) =>
            snapshot.docs.map((doc) => ExploitCard.fromFirestore(doc)).toList());
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: StreamBuilder<List<ExploitCard>>(
        stream: _getExploitsStream(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }
          if (snapshot.hasError) {
            return Center(
              child: Text('Error loading exploits: ${snapshot.error}'),
            );
          }
          final exploitsList = snapshot.data ?? [];
          if (exploitsList.isEmpty) {
            return const Center(child: Text('No exploits available'));
          }
          return ListView.builder(
            padding: const EdgeInsets.all(16.0),
            itemCount: exploitsList.length,
            itemBuilder: (context, index) {
              final exploit = exploitsList[index];
              return _buildExploitCard(context, exploit);
            },
          );
        },
      ),
    );
  }

  Widget _buildExploitCard(BuildContext context, ExploitCard exploit) {
    return Card(
      margin: const EdgeInsets.only(bottom: 16.0),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Expanded(
                  child: Text(
                    exploit.name,
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: Theme.of(context).colorScheme.primary,
                    ),
                  ),
                ),
                Row(
                  children: exploit.platform.map((platformIcon) {
                    return Padding(
                      padding: const EdgeInsets.only(left: 4.0),
                      child: Image.asset(
                        'assets/images$platformIcon',
                        width: 24,
                        height: 24,
                      ),
                    );
                  }).toList(),
                ),
              ],
            ),
            const SizedBox(height: 8),
            if (exploit.pros.isNotEmpty) _buildSection(context, 'Pros', exploit.pros, Colors.green),
            if (exploit.neutral.isNotEmpty) _buildSection(context, 'Neutral', exploit.neutral, Colors.yellow),
            if (exploit.cons.isNotEmpty) _buildSection(context, 'Cons', exploit.cons, Colors.red),
            const SizedBox(height: 8),
            Wrap(
              spacing: 8.0,
              children: [
                ElevatedButton(
                  onPressed: () {
                    _launchURL(context, exploit.button[1]);
                  },
                  child: Text(exploit.button[0]),
                  style: ElevatedButton.styleFrom(
                    foregroundColor: Theme.of(context).colorScheme.onPrimary, backgroundColor: Theme.of(context).colorScheme.primary,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 8),
            Text(
              'Last edited by: ${exploit.lastEditedBy}',
              style: TextStyle(
                fontSize: 12,
                color: Theme.of(context).colorScheme.onSurface,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSection(BuildContext context, String title, List<String> items, Color color) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            title,
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
              color: color,
            ),
          ),
          const SizedBox(height: 4),
          ...items.map((item) => Text(
            '- $item',
            style: TextStyle(
              fontSize: 14,
              color: Theme.of(context).colorScheme.onSurface,
            ),
          )),
        ],
      ),
    );
  }

  void _launchURL(BuildContext context, String url) async {
    final Uri uri = Uri.parse(url);
    if (await canLaunch(uri.toString())) {
      await launch(uri.toString(), forceSafariVC: false);
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Could not launch $url')),
      );
    }
  }
}
